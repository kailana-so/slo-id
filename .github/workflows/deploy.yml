name: Deploy Slo-id

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install root deps
        run: yarn install --frozen-lockfile

      - name: Build client (Vite)
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_MEASUREMENT_ID: ${{ secrets.VITE_MEASUREMENT_ID }}
          VITE_ALA_OCCURANCE_API: ${{ secrets.VITE_ALA_OCCURANCE_API }}
          VITE_X_SYSTEM_KEY: ${{ secrets.VITE_X_SYSTEM_KEY }}
        run: |
          set -e
          cd client
          yarn build

      - name: Build server (tsc)
        run: |
          set -e
          cd server
          yarn build

      - name: Create deployment bundle
        run: |
          set -e
          tar -czf slo-id-deploy.tgz \
            client/dist \
            server/dist \
            server/package.json \
            yarn.lock

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Upload bundle to droplet
        env:
          SSH_PORT: ${{ secrets.DROPLET_SSH_PORT }}
        run: |
          set -e
          PORT_FLAG=""
          if [[ -n "${SSH_PORT:-}" ]]; then PORT_FLAG="-P ${SSH_PORT}"; fi
          scp -o StrictHostKeyChecking=no ${PORT_FLAG} \
            slo-id-deploy.tgz \
            "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:/tmp/slo-id-deploy.tgz"

      - name: SSH – deploy & run
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} <<'SSH'
          set -euo pipefail

          APP_DIR=/var/www/slo-id
          BUNDLE=/tmp/slo-id-deploy.tgz

          command -v yarn >/dev/null 2>&1 || sudo npm i -g yarn@1.22.22
          command -v pm2  >/dev/null 2>&1 || sudo npm i -g pm2

          echo "Extracting bundle..."
          mkdir -p "$APP_DIR"
          rm -rf "$APP_DIR/client" "$APP_DIR/server/dist" "$APP_DIR/server/package.json" "$APP_DIR/yarn.lock"
          tar -xzf "$BUNDLE" -C "$APP_DIR"

          echo "🧹 Clearing any cached files..."
          sudo rm -rf /var/cache/nginx/* 2>/dev/null || true

          echo "Writing environment..."
          cd "$APP_DIR"
          cat > server/dist/.env <<ENV
          NODE_ENV=production
          PORT=3002
          CLIENT_URL=${{ secrets.CLIENT_URL }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET=${{ secrets.AWS_BUCKET }}
          CC_API_KEY=${{ secrets.CC_API_KEY }}
          CC_HOST=${{ secrets.CC_HOST }}
          CC_MODEL=${{ secrets.CC_MODEL }}
          CC_VERSION=${{ secrets.CC_VERSION }}
          DS_API_KEY=${{ secrets.DS_API_KEY }}
          DS_CHAT_HOST=${{ secrets.DS_CHAT_HOST }}
          WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
          WEATHER_API_HOST=${{ secrets.WEATHER_API_HOST }}
          NOMINATION_API_HOST=${{ secrets.NOMINATION_API_HOST }}
          EMAIL_SIGNER=${{ secrets.EMAIL_SIGNER }}
          VITE_X_SYSTEM_KEY=${{ secrets.VITE_X_SYSTEM_KEY }}
          ENV

          echo "Installing server dependencies..."
          cp "$APP_DIR/yarn.lock" "$APP_DIR/server/yarn.lock"
          cd "$APP_DIR/server"
          sudo rm -rf node_modules
          yarn install --frozen-lockfile --production

          echo "Verifying dependencies..."
          node -e "require('iconv-lite').encodingExists('utf8')" || { echo '❌ iconv-lite missing'; exit 1; }

          echo "🚀 Restarting server..."
          if pm2 describe slo-id >/dev/null 2>&1; then
            pm2 reload slo-id --update-env --kill-timeout 4000
          else
            pm2 start "node dist/index.js" --name slo-id
          fi

          pm2 save
          echo "[SUCCESS] Deploy complete"
          SSH
